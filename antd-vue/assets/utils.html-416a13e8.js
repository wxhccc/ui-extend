import{_ as e,p as t,q as p,Q as s,t as n,v as o,a1 as c}from"./framework-d784189f.js";const l={},i={class:"custom-container warning"},r=s("p",{class:"custom-container-title"},"注意",-1),d=s("code",null,"ui-extend",-1),u=c(`<h2 id="使用方法" tabindex="-1"><a class="header-anchor" href="#使用方法" aria-hidden="true">#</a> 使用方法</h2><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token comment">// 引入cjs文件</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> loadjs<span class="token punctuation">,</span> vwp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ui-extend&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="方法" tabindex="-1"><a class="header-anchor" href="#方法" aria-hidden="true">#</a> 方法</h2><h3 id="loadjs" tabindex="-1"><a class="header-anchor" href="#loadjs" aria-hidden="true">#</a> loadjs</h3><p>简单的动态js脚步引入函数，返回promise对象，适用于没有npm包或者希望懒加载cdn资源的场景。</p><p><strong>类型定义</strong>: <code>loadjs(url: string)</code></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">loadjs</span><span class="token punctuation">(</span>url<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token keyword">void</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>:</p><ul><li><code>url</code> { string } js脚本地址。</li></ul><p><strong>示例</strong>:</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> loadjs <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ui-extend&#39;</span>

<span class="token function">loadjs</span><span class="token punctuation">(</span><span class="token string">&#39;https://www.example.com/xxxxxxxx.js&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 这里的代码可以使用动态脚步的内容</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="vwp" tabindex="-1"><a class="header-anchor" href="#vwp" aria-hidden="true">#</a> <code>vwp</code></h3><p><code>@wxhccc/es-util</code>库的<code>wp</code> 函数的vue封装，提供ref的支持</p><p><strong>类型定义</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> vwp <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>promise<span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token constant">T</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> lock<span class="token operator">?</span><span class="token operator">:</span> WpOptions<span class="token punctuation">[</span><span class="token string">&#39;lock&#39;</span><span class="token punctuation">]</span> <span class="token operator">|</span> Ref<span class="token operator">&lt;</span><span class="token builtin">boolean</span><span class="token operator">&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">Promise</span><span class="token operator">&lt;</span><span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token punctuation">]</span> <span class="token operator">|</span> <span class="token punctuation">[</span>Error<span class="token punctuation">,</span> <span class="token keyword">undefined</span><span class="token punctuation">]</span><span class="token operator">&gt;</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>:</p><ul><li><code>promise</code> promise对象</li><li><code>lock</code> 格式化字符串，默认值为：<code>0,0</code></li></ul><p><strong>示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> ref <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;vue&#39;</span>
<span class="token keyword">import</span> <span class="token punctuation">{</span> vwp <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ui-extend&#39;</span>

<span class="token keyword">const</span> loading <span class="token operator">=</span> <span class="token function">ref</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span>


<span class="token keyword">const</span> <span class="token function-variable function">getApiData</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token comment">// 函数调用时会设置loading为true</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span>err<span class="token punctuation">,</span> data<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token generic-function"><span class="token function">vwm</span><span class="token generic class-name"><span class="token operator">&lt;</span>Data<span class="token operator">&gt;</span></span></span><span class="token punctuation">(</span><span class="token function">fetch</span><span class="token punctuation">(</span><span class="token string">&#39;https://xxxxxx.xx.xx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> loading<span class="token punctuation">)</span>
  <span class="token comment">// promise结束后loading会为false</span>
  <span class="token comment">// 如果promise报错，err是错误对象，否则data是返回数据</span>
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="resolvefunctional" tabindex="-1"><a class="header-anchor" href="#resolvefunctional" aria-hidden="true">#</a> <code>resolveFunctional</code></h3><p>解析可能是函数化返回的变量</p><p><strong>类型定义</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">declare</span> <span class="token keyword">const</span> resolveFunctional <span class="token operator">=</span> <span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">(</span>value<span class="token operator">:</span> <span class="token constant">R</span> <span class="token operator">|</span> AnyFunction<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;</span><span class="token punctuation">,</span> <span class="token operator">...</span>args<span class="token operator">:</span> Parameters<span class="token operator">&lt;</span>AnyFunction<span class="token operator">&lt;</span><span class="token constant">R</span><span class="token operator">&gt;&gt;</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">R</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>:</p><ul><li><code>value</code> { <code>any | AnyFunction&lt;any&gt;</code> } 特定值，或者返回特定值的函数</li><li><code>...args</code> { <code>any[]</code> } 传递给函数的参数序列</li></ul><p><strong>示例</strong></p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> resolveFunctional <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ui-extend&#39;</span>

<span class="token doc-comment comment">/** 组件的props对象类型 */</span>
<span class="token keyword">type</span> <span class="token class-name">InputProps</span> <span class="token operator">=</span> xxx

<span class="token doc-comment comment">/** 在另外一个组件里 */</span>
<span class="token keyword">interface</span> <span class="token class-name">CustomInputProps</span> <span class="token punctuation">{</span>
  inputProps<span class="token operator">:</span> InputProps <span class="token operator">|</span> <span class="token punctuation">(</span>type<span class="token operator">:</span> <span class="token string">&#39;text&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;password&#39;</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> InputProps
<span class="token punctuation">}</span>

<span class="token doc-comment comment">/** 组建内部可以直接用来获取获取值 */</span>
<span class="token keyword">const</span> trueInputProps <span class="token operator">=</span> <span class="token function">resolveFunctional</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>inputProps<span class="token punctuation">,</span> <span class="token string">&#39;text&#39;</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="dateformat" tabindex="-1"><a class="header-anchor" href="#dateformat" aria-hidden="true">#</a> <code>dateFormat</code></h3><p>使用<code>dayjs</code>库(时间处理库)的格式化函数格式化时间</p><p><strong>类型定义</strong>:</p><div class="language-typescript line-numbers-mode" data-ext="ts"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">dateFormat</span><span class="token punctuation">(</span>date<span class="token operator">:</span> <span class="token builtin">string</span> <span class="token operator">|</span> <span class="token builtin">number</span> <span class="token operator">|</span> Date <span class="token operator">|</span> Dayjs<span class="token punctuation">,</span> format<span class="token operator">?</span><span class="token operator">:</span> <span class="token string">&#39;default&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;date&#39;</span> <span class="token operator">|</span> <span class="token string">&#39;time&#39;</span> <span class="token operator">|</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">string</span>
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p><strong>参数</strong>:</p><ul><li><code>date</code> {string | number | Date | Dayjs} 需要转换的时间，支持Date对象，字符串格式时间，10/13位时间戳，dayjs对象</li><li><code>format</code> {string} 输出时间的格式。默认值为：&#39;YYYY-MM-DD HH:mm:ss&#39;，支持具体格式字符串或者格式别名。default: &#39;YYYY-MM-DD HH:mm:ss&#39;，date: &#39;YYYY-MM-DD&#39;</li></ul><p><strong>示例</strong></p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> dateFormat <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;ui-extend&#39;</span>

<span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
<span class="token comment">// log &#39;2019-08-29 11:12:13&#39;</span>
<span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token string">&#39;2019/08/29&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// log &#39;2019-08-29 00:00:00&#39;</span>
<span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token number">1567042733116</span><span class="token punctuation">,</span> <span class="token string">&#39;date&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// log &#39;2019-08-29&#39;</span>
<span class="token function">dateFormat</span><span class="token punctuation">(</span><span class="token number">1567042733</span><span class="token punctuation">,</span> <span class="token string">&#39;YYYY-MM-DD HH:mm&#39;</span><span class="token punctuation">)</span>
<span class="token comment">// log &#39;2019-08-29 09:38&#39;</span>

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,35);function k(a,m){return t(),p("div",null,[s("div",i,[r,s("p",null,[n("下文中 "),d,n(" 不是真实包名，指代当前ui库相关的库: "+o(a.CUR_LIB_NAME),1)])]),u])}const g=e(l,[["render",k],["__file","utils.html.vue"]]);export{g as default};
